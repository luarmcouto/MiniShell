# COLORS
RED    = \033[31m
GREEN  = \033[32m
WHITE  = \033[37m
YELLOW = \033[33m
RESET  = \033[0m
BLUE   = \033[34m
PURPLE = \033[35m
TITLE  = \033[32;40m
BOLD   = \033[1m

LIBFTDIR = libft
NAME     = minishell
FLAGS    = -Wall -Wextra -Werror -g -Iincludes
IFLAGS   = -Iincludes/ -I${LIBFTDIR}
CC       = cc
SRCS     = $(wildcard srcs/*.c) $(wildcard srcs/*/*.c)
OBJS     = ${SRCS:.c=.o}
INCLUDE  = -L${LIBFTDIR} -lft -lreadline
VALGRIND = valgrind  --track-fds=yes --leak-check=full --show-leak-kinds=all --suppressions=readline.supp
ENV      = env -i ${VALGRIND}

# Progress variables
TOTAL_FILES = $(words $(SRCS))
COMPILED = 0

# Set readline for MacOs and Linux
UNAME := $(shell uname)
ifeq ($(UNAME), Linux)
    INCLUDE = -L${LIBFTDIR} -lft -lreadline -lhistory
    READLINE =
else ifeq ($(UNAME), Darwin)
    INCLUDE = -L${LIBFTDIR} -lft -L/opt/homebrew/opt/readline/lib -lreadline
    READLINE = -I/opt/homebrew/opt/readline/include
endif

all: ${NAME}

# Libft como depend√™ncia separada
${LIBFTDIR}/libft.a:
	@printf "$(YELLOW)$(BOLD)üîß Checking libft...$(RESET)\n"
	@if [ ! -d "${LIBFTDIR}" ]; then \
		printf "$(YELLOW)üì¶ Libft not found. Cloning...$(RESET)\n"; \
		git clone https://github.com/luarmcouto/libft.git ${LIBFTDIR}; \
	fi
	@printf "$(YELLOW)üî® Building libft...$(RESET)\n"
	@make -C ${LIBFTDIR}
	@printf "$(GREEN)‚úì Libft ready!$(RESET)\n"

# Progress bar function for minishell
define progress_bar
	$(eval COMPILED := $(shell echo $$(($(COMPILED) + 1))))
	$(eval PERCENT := $(shell echo $$(($(COMPILED) * 100 / $(TOTAL_FILES)))))
	$(eval BARS := $(shell echo $$(($(PERCENT) / 2))))
	$(eval SPACES := $(shell echo $$((50 - $(BARS)))))
	$(eval FILENAME := $(shell basename $< .c))
	@printf "\r$(BLUE)$(BOLD)[%3d%%]$(RESET) $(GREEN)%s$(RESET) $(YELLOW)%s$(RESET)" \
		$(PERCENT) \
		"$$(printf '%*s' $(BARS) | tr ' ' '‚ñà')" \
		"$(FILENAME)"
	@if [ $(COMPILED) -eq $(TOTAL_FILES) ]; then printf "\n"; fi
endef

# Regra principal - apenas compila se necess√°rio
${NAME}: ${LIBFTDIR}/libft.a ${OBJS}
	@printf "$(YELLOW)$(BOLD)üîó Linking ${NAME}...$(RESET)\n"
	@${CC} ${FLAGS} ${READLINE} ${OBJS} ${INCLUDE} -o ${NAME}
	@printf "\n"
	@printf "$(TITLE)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(RESET)\n"
	@printf "$(TITLE)‚ïë                                                                              ‚ïë$(RESET)\n"
	@printf "$(CYAN)‚ïë      ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó$(BLUE)‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó     $(RESET)\n"
	@printf "$(CYAN)‚ïë      ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë$(BLUE)‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     $(RESET)\n"
	@printf "$(CYAN)‚ïë      ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë$(BLUE)‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     $(RESET)\n"
	@printf "$(CYAN)‚ïë      ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë$(BLUE)‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     $(RESET)\n"
	@printf "$(CYAN)‚ïë      ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë$(BLUE)‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó$(RESET)\n"
	@printf "$(CYAN)‚ïë      ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù$(BLUE)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(RESET)\n"
	@printf "$(TITLE)‚ïë                                                                              ‚ïë$(RESET)\n"
	@printf "$(TITLE)‚ïë                                                                              ‚ïë$(RESET)\n"
	@printf "$(GREEN)‚ïë       ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó       $(RESET)\n"
	@printf "$(GREEN)‚ïë       ‚ïë            $(WHITE)üêö $(BOLD)A Beautiful Shell Implementation$(RESET) $(GREEN)üêö            ‚ïë       $(RESET)\n"
	@printf "$(GREEN)‚ïë       ‚ïë         $(CYAN)Full POSIX compliance $(WHITE)‚Ä¢ $(BLUE)Pipes $(WHITE)‚Ä¢ $(PURPLE)Redirections $(WHITE)‚Ä¢ $(RED)Built-ins$(GREEN)         ‚ïë       $(RESET)\n"
	@printf "$(GREEN)‚ïë       ‚ïë              $(YELLOW)Advanced parsing with Binary Tree architecture$(GREEN)              ‚ïë       $(RESET)\n"
	@printf "$(GREEN)‚ïë       ‚ïë                   $(YELLOW)Crafted with $(RED)‚ô•$(YELLOW) by $(CYAN)@luarodri$(YELLOW) & $(CYAN)@iwietzke$(GREEN)                   ‚ïë       $(RESET)\n"
	@printf "$(GREEN)‚ïë       ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù       $(RESET)\n"
	@printf "$(TITLE)‚ïë                                                                              ‚ïë$(RESET)\n"
	@printf "$(TITLE)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(RESET)\n"
	@printf "\n"
	@printf "$(B_GREEN)                          üéâ SUCCESSFULLY COMPILED! üéâ                           $(RESET)\n"
	@printf "$(B_BLUE)                        Your shell is ready to command! üí™                       $(RESET)\n"
	@printf "\n"

%.o: %.c
	@${CC} ${FLAGS} ${READLINE} ${IFLAGS} -c $< -o $@
	@$(progress_bar)

clean:
	@printf "$(YELLOW)üßπ Cleaning object files...$(RESET)\n"
	@${RM} ${OBJS}
	@if [ -d ${LIBFTDIR} ]; then make -C ${LIBFTDIR} clean; fi
	@printf "$(GREEN)‚úì Clean completed.$(RESET)\n"

fclean: clean
	@printf "$(YELLOW)üí• Full clean with libft removal...$(RESET)\n"
	@${RM} ${NAME}
	@rm -rf ${LIBFTDIR}
	@printf "$(GREEN)‚úì Full clean with libft removal completed.$(RESET)\n"

test: ${NAME} readline.supp
	@printf "$(BLUE)üß™ Running tests with Valgrind...$(RESET)\n"
	${VALGRIND} ./${NAME}

readline.supp:
	@printf "$(YELLOW)üìù Creating readline suppression file...$(RESET)\n"
	@echo "{" > readline.supp
	@echo "    leak readline" >> readline.supp
	@echo "    Memcheck:Leak" >> readline.supp
	@echo "    ..." >> readline.supp
	@echo "    fun:readline" >> readline.supp
	@echo "}" >> readline.supp
	@echo "{" >> readline.supp
	@echo "    leak add_history" >> readline.supp
	@echo "    Memcheck:Leak" >> readline.supp
	@echo "    ..." >> readline.supp
	@echo "    fun:add_history" >> readline.supp
	@echo "}" >> readline.supp
	@echo "{" >> readline.supp
	@echo "    leak rl_parse_and_bind" >> readline.supp
	@echo "    Memcheck:Leak" >> readline.supp
	@echo "    ..." >> readline.supp
	@echo "    fun:add_history" >> readline.supp
	@echo "}" >> readline.supp
	@printf "$(GREEN)‚úì Suppression file created.$(RESET)\n"

env: ${NAME}
	@printf "$(BLUE)üåç Running with clean environment...$(RESET)\n"
	${ENV} ./${NAME}

re: fclean all

# Force rebuild of everything including libft
re-all: fclean all

# Debug rule to check libft
debug-libft:
	@printf "$(BLUE)üîç Libft Debug Information:$(RESET)\n"
	@printf "$(BLUE)üìÇ Libft directory: ${LIBFTDIR}$(RESET)\n"
	@printf "$(BLUE)üìÅ Libft exists: $(shell [ -d ${LIBFTDIR} ] && echo "$(GREEN)YES$(RESET)" || echo "$(RED)NO$(RESET)")\n"
	@printf "$(BLUE)üìö Libft.a exists: $(shell [ -f ${LIBFTDIR}/libft.a ] && echo "$(GREEN)YES$(RESET)" || echo "$(RED)NO$(RESET)")\n"
	@if [ -d ${LIBFTDIR} ]; then \
		printf "$(BLUE)üìã Libft contents:$(RESET)\n"; \
		ls -la ${LIBFTDIR}/ | head -10; \
	fi

# Show compilation stats
stats:
	@printf "$(BLUE)üìä Project Statistics:$(RESET)\n"
	@printf "$(YELLOW)üìÅ Total source files: $(BOLD)$(TOTAL_FILES)$(RESET)\n"
	@printf "$(YELLOW)üìÇ Source directories:$(RESET)\n"
	@find srcs -type d | sed 's/^/  /'
	@printf "$(YELLOW)üóÇÔ∏è  Include files:$(RESET)\n"
	@find includes -name "*.h" | sed 's/^/  /'

.PHONY: all clean fclean re re-all test env debug-libft stats