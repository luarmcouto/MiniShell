total 100
drwxr-xr-x 3 luarodri 2024_lisboa    36 Oct 24 21:28 libs
-rw-r--r-- 1 luarodri 2024_lisboa  9487 Oct 27 21:28 Makefile
-rwxr-xr-x 1 luarodri 2024_lisboa 73648 Oct 27 21:29 minishell
drwxr-xr-x 3 luarodri 2024_lisboa    23 Oct 27 21:29 objs
-rw-r--r-- 1 luarodri 2024_lisboa  1620 Oct 27 19:28 readline.supp
-rw-r--r-- 1 luarodri 2024_lisboa  4219 Oct 24 21:28 README.md
drwxr-xr-x 3 luarodri 2024_lisboa    40 Oct 24 21:28 src
-rw-r--r-- 1 luarodri 2024_lisboa     0 Oct 27 22:05 test
-rw-r--r-- 1 luarodri 2024_lisboa  1971 Oct 27 19:28 test_script.sh
NAME = minishell

# Debug mode: make DEBUG=1 for sanitizers
DEBUG ?= 0

# Base compilation flags
BASE_CFLAGS = -Wall -Wextra -Werror -I/opt/homebrew/opt/readline/include
BASE_LDFLAGS = -L/opt/homebrew/opt/readline/lib -lreadline -lncurses

# Add sanitizer flags if DEBUG=1
ifeq ($(DEBUG), 1)
    CFLAGS = $(BASE_CFLAGS) -g3 -fsanitize=leak -fno-omit-frame-pointer
    LDFLAGS = $(BASE_LDFLAGS) -fsanitize=leak
    SANITIZER_MSG = with LeakSanitizer
else
    CFLAGS = $(BASE_CFLAGS)
    LDFLAGS = $(BASE_LDFLAGS)
    SANITIZER_MSG = (production mode)
endif

# Compilator
CC = cc

# Archiver
AR = ar rcs

# Directories
SRC_DIR = src
MANDATORY_DIR = $(SRC_DIR)/mandatory
BONUS_DIR = $(SRC_DIR)/bonus
UTILS_DIR = utils
LIBS_DIR = libs
LIBFT_DIR = $(LIBS_DIR)/libft
OBJ_DIR = objs
OBJ_MANDATORY_DIR = $(OBJ_DIR)/mandatory
OBJ_BONUS_DIR = $(OBJ_DIR)/bonus

# Library files
LIB_NAME = $(LIBFT_DIR)/libft.a

# Main Source Files
MAIN_SOURCE = $(MANDATORY_DIR)/main.c
MAIN_SOURCE_BONUS = $(BONUS_DIR)/main.c

# Source files
MINISHELL_SRCS = \
	$(MANDATORY_DIR)/ft_minishell.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/ft_msg_start.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/ft_cleanup.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/ft_cleanup_child.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/ft_search_file/ft_is_dot_or_dotdot.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/ft_search_file/ft_search_file.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/ft_search_file/ft_search_in_dir.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/ft_search_file/ft_search_in_subdirs.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/ft_search_file/ft_build_path.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/ft_count_args.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/ft_redir_io.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/ft_free_char_array.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/error/ft_handle_error.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/input/ft_read_input.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/input/ft_process_input.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/debug/ft_show_debug.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/prompt/ft_get_directory_path.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/prompt/ft_generate_prompt.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/env/ft_cpyenv.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/env/ft_getenv.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/env/ft_setenv.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/env/ft_setenv_utils.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/redirections/ft_handle_infile.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/redirections/ft_handle_outfile.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/execution/ft_exec_cmd.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/execution/ft_get_cmd_path.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/execution/ft_close_unused_fds.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/execution/ft_finish_execution.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/execution/ft_execute_error_command.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/execution/ft_execute_pipeline.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/execution/ft_handle_heredoc.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/execution/ft_setup_child_io.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/parsing/ft_skip_quotes.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/parsing/ft_check_unclosed_quotes.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/parsing/ft_split_input.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/parsing/ft_split_input_utils.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/parsing/ft_parse_input.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/parsing/ft_parse_input_utils.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/parsing/ft_handle_env_expansion.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/parsing/ft_remove_quotes.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/parsing/ft_remove_quotes_utils.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/parsing/ft_syntax_check.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/parsing/ft_handle_env_expansion_utils.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/signals/ft_sigint_handler.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/signals/ft_init_signals.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/builtins/ft_echo.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/builtins/ft_cd.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/builtins/ft_pwd.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/builtins/ft_export.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/builtins/ft_unset.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/builtins/ft_env.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/builtins/ft_exit.c \
	$(MANDATORY_DIR)/$(UTILS_DIR)/builtins/ft_handle_builtins.c

# Objetos para mandatory y bonus
MAIN_OBJECT = $(MAIN_SOURCE:$(MANDATORY_DIR)/%.c=$(OBJ_MANDATORY_DIR)/%.o)
MINISHELL_OBJS = $(MINISHELL_SRCS:$(MANDATORY_DIR)/%.c=$(OBJ_MANDATORY_DIR)/%.o)
VALGRIND_SUPP = valgrind_suppression.supp

# Colors
GREEN = \033[32m
YELLOW = \033[33m
RED = \033[31m
BLUE = \033[34m
MAGENTA = \033[35m
CYAN = \033[36m
RESET = \033[0m

all: $(LIB_NAME) $(NAME)
	@echo "$(MAGENTA)$(NAME) executable is ready to use! $(SANITIZER_MSG)$(RESET)"

# Compile the library
$(LIB_NAME):
	@$(MAKE) -C $(LIBFT_DIR)

# Compile the project
$(NAME): $(MINISHELL_OBJS) $(MAIN_OBJECT)
	@echo "$(CYAN)Linking $(NAME)...$(RESET)"
	@$(CC) $(CFLAGS) $(MINISHELL_OBJS) $(MAIN_OBJECT) $(LIB_NAME) $(LDFLAGS) -o $(NAME)
	@if [ $$? -eq 0 ]; then \
		echo "$(GREEN)‚úÖ Compilation completed successfully! $(SANITIZER_MSG)$(RESET)"; \
	else \
		echo "$(RED)‚ùå Error during compilation!$(RESET)"; \
	fi

# Compile object files for mandatory
$(OBJ_MANDATORY_DIR)/%.o: $(MANDATORY_DIR)/%.c
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) -c $< -o $@

# Create valgrind suppression file
$(VALGRIND_SUPP):
	@echo "$(YELLOW)Creating valgrind suppression file...$(RESET)"
	@echo "{" > $(VALGRIND_SUPP)
	@echo "   readline_memory_leak_suppression" >> $(VALGRIND_SUPP)
	@echo "   Memcheck:Leak" >> $(VALGRIND_SUPP)
	@echo "   ..." >> $(VALGRIND_SUPP)
	@echo "   fun:readline" >> $(VALGRIND_SUPP)
	@echo "}" >> $(VALGRIND_SUPP)
	@echo "{" >> $(VALGRIND_SUPP)
	@echo "   readline_add_history_suppression" >> $(VALGRIND_SUPP)
	@echo "   Memcheck:Leak" >> $(VALGRIND_SUPP)
	@echo "   ..." >> $(VALGRIND_SUPP)
	@echo "   fun:add_history" >> $(VALGRIND_SUPP)
	@echo "}" >> $(VALGRIND_SUPP)
	@echo "{" >> $(VALGRIND_SUPP)
	@echo "   readline_internal_suppression" >> $(VALGRIND_SUPP)
	@echo "   Memcheck:Leak" >> $(VALGRIND_SUPP)
	@echo "   ..." >> $(VALGRIND_SUPP)
	@echo "   fun:_rl_*" >> $(VALGRIND_SUPP)
	@echo "}" >> $(VALGRIND_SUPP)
	@echo "{" >> $(VALGRIND_SUPP)
	@echo "   suppress_execve_bin_error" >> $(VALGRIND_SUPP)
	@echo "   Memcheck:Leak" >> $(VALGRIND_SUPP)
	@echo "   ..." >> $(VALGRIND_SUPP)
	@echo "   obj:/usr/bin/*" >> $(VALGRIND_SUPP)
	@echo "}" >> $(VALGRIND_SUPP)
	@echo "$(GREEN)‚úÖ Valgrind suppression file created!$(RESET)"

# Run valgrind with suppression
v: $(LIB_NAME) $(NAME) $(VALGRIND_SUPP)
	@echo "$(YELLOW)Running valgrind with suppression file...$(RESET)"
	@valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes \
		--trace-children=yes --child-silent-after-fork=yes \
		--suppressions=./$(VALGRIND_SUPP) ./$(NAME)

# Debug target with LeakSanitizer
debug: fclean
	@echo "$(BLUE)üîç Compiling with LeakSanitizer...$(RESET)"
	@$(MAKE) DEBUG=1
	@echo "$(GREEN)‚úÖ Debug build ready! Run ./$(NAME) to test$(RESET)"

# Test with LeakSanitizer
leak: debug
	@echo "$(YELLOW)üß™ Testing with LeakSanitizer...$(RESET)"
	@echo "Type 'exit' to quit the shell"
	@./$(NAME)

# Clean up object files
clean:
	@rm -rf $(OBJ_DIR)
	@$(MAKE) -C $(LIBFT_DIR) clean
	@if [ $$? -eq 0 ]; then \
		echo "$(GREEN)üßπ Object files cleaned successfully!$(RESET)"; \
	else \
		echo "$(RED)‚ùå Error cleaning object files!$(RESET)"; \
	fi

# Clean up object files and the executable
fclean: clean
	@$(MAKE) -C $(LIBFT_DIR) fclean
	@rm -f $(NAME) $(NAME)_bonus $(VALGRIND_SUPP)
	@if [ $$? -eq 0 ]; then \
		echo "$(GREEN)üóëÔ∏è  Libraries, objects and executables cleaned successfully!$(RESET)"; \
	else \
		echo "$(RED)‚ùå Error cleaning libraries, objects and executables!$(RESET)"; \
	fi

re: fclean
	@echo "$(BLUE)üîÑ Recompiling everything...$(RESET)"
	@$(MAKE) all
	@if [ $$? -eq 0 ]; then \
		echo "$(MAGENTA)üéâ Recompilation completed successfully!$(RESET)"; \
	else \
		echo "$(RED)‚ùå Error during recompilation!$(RESET)"; \
	fi

# Help message
help:
	@echo "$(CYAN)‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó$(RESET)"
	@echo "$(CYAN)‚ïë              Minishell Makefile Commands                  ‚ïë$(RESET)"
	@echo "$(CYAN)‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£$(RESET)"
	@echo "$(GREEN)  make              $(RESET)- Compile in production mode"
	@echo "$(GREEN)  make DEBUG=1      $(RESET)- Compile with LeakSanitizer"
	@echo "$(GREEN)  make debug        $(RESET)- Clean + compile with LeakSanitizer"
	@echo "$(GREEN)  make leak         $(RESET)- Compile and run with LeakSanitizer"
	@echo "$(GREEN)  make v            $(RESET)- Run with Valgrind"
	@echo "$(GREEN)  make clean        $(RESET)- Remove object files"
	@echo "$(GREEN)  make fclean       $(RESET)- Remove everything"
	@echo "$(GREEN)  make re           $(RESET)- Recompile everything"
	@echo "$(CYAN)‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù$(RESET)"

# Phony targets
.PHONY: all clean fclean re v debug leak help